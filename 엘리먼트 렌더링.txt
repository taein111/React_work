## 엘리먼트

- 리액트 앱을 구성하는 요소를 의미한다 ( 리액트 앱의 가장 작은 빌딩 블록들)
- 엘리먼트는 원래 웹사이트에 대한 모든 정보를 담고 있는 객체인 DOM에서 사용하는 용어이다.
- 실제 브라우저의 DOM에 존재하는 엘리먼트는 DOM 엘리먼트가 되는 것이고, 리액트의 VirtualDOM에 존재하는 엘리먼트가 리액트 엘리먼트가 되는 것이다 → 리액트 엘리먼트는 DOM 엘리먼트의 가상 표현이라고 볼 수 있다.
- 리액트 엘리먼트는 화면에서 보이는 것을 기술한다. 엘리먼트가 기술한 내용을 토대로 실제 화면에서 보게되는 DOM 엘리먼트가 만들어진다.

```jsx
const element = <h1>hello, world</h>;
```

- 대입 연산자 = 왼쪽 부분에 나오는 변수의 이름이 element로 되어 있다. 이 코드가 실행될 때, 대입 연산자 오른쪽 부분은 리액트의 createElement()함수를 사용하여 엘리먼트를 생성하게 된다.
    
        ⇒이렇게 생성된 것이 리액트 엘리먼트이다.
    

## 엘리먼트 생김새

- 리액트 엘리먼트는 자바스크립트 객체 형태로 존재한다.
- 엘리먼트는 컴포넌트 유형(예 : Button) 과 속성 (예: color) 및 내부의 모든 자식에 대한 정보를 포함하고 있는 일반적인 자바스크립트 객체이다. 불변성을 갖고 있다.

```jsx
{
	type : 'button',
	props : {
		className : 'bg-green',
		children: {
			type : 'b',
			props: {
				children: "hello, element!"
				}
			}
		}
	}			
```

위 코드는 버튼을 나타내기 위한 엘리먼트

- 엘리먼트는 해당 태그 이름을 가지 DOM Node를 나타내고 props는 속성을 나타낸다.

위 엘리먼트가 실제로 렌더링 된다면 아래와 같은 DOM 엘리먼트가 된다.

```jsx
<button class='bg-green'>
	<b>
		hello, element!
	</b>
</button>
	
```

=⇒ 컴포넌트 렌더링을 위해서 모든 컴포넌트가 createElement() 함수를 통해 엘리먼트로 변환된다.

## 엘리먼트의 특징

- 불변성 - 엘리먼트 생성 후에는 children 이나 attribute를 바꿀 수 없다.
    
    → 화면에 변경된 엘리먼트들을 보여주기 위해서는 어떻게 해야할까? 
    
    → 새로운 엘리먼트를 만들어서 기존 엘리먼트와 바꿔치기한다.
    
- 빠른 렌더링 속도  - 화면에 새로운 내용을 보여주기 위해서 virtual DOM은 변경된 부분을 계산하고 해당 부분만을 다시 렌더링한다.

## 엘리먼트 렌더링하기

- 엘리먼트를 생성한 이후에 실제로 화면에 보여주기 위해서 렌더링이라는 과정을 거쳐야 한다.

```jsx
<div id = "root"></div>
```

위 코드는 단순하지만 모든 리액트 앱에 필수적으로 들어가는 아주 중요한 코드이다.

실제로 이 <div> 태그 안에 리액트 엘리먼트 들이 렌더링 되며, 이 것을 root DOM node 라고 한다.

이 div 태그 안에 있는 모든 것이 리액트 dom에 의해 관리된다

- 오직 리액트만으로 만들어진 모든 웹사이트들은 단 하나의 root DOM node를 가지게 된다.
- 기존에 있던 웹사이트에 추가적으로 리액트를 연동하게 되면 분리된 수많은 root DOM node를 가질 수도 있다.

위의 root<div>에 리액트 엘리먼트를 렌더링 하기 위해서는 아래와 같은 코드를 사용한다.

```jsx
const element = <h1>안녕, 리액트</h1>;
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(element);
```

- 위 코드는 렌더링을 위해 ReactDOM의 createRoot() 함수를 사용하여 만든 root의 render()함수를 사용한다. 이 함수는 파라미터로 받은 리액트 엘리먼트를 root DOM node에 렌더링하는 역할을 한다.
- 리액트의 엘리먼트와 HTML 의 엘리먼트는 다른개념이다. 리액트의 엘리먼트는 리액트의 Virtual DOM에 존재하는 것이고, HTML 엘리먼트는 실제 브라우저의 DOM에 존재하는 것이다.
    - 리액트의 엘리먼트가 렌더링되는 과정은 Virtual DOM에서 실제 DOM으로 이동하는 과정이라고 할 수 있다.
    
    ## 렌더링된 엘리먼트 업데이트하기
    
    ```jsx
    function tick(){
    	const element = (
    	<div>
    		<h1>안녕, 리액트!</h1>
    		<h2>현재 시간: {ne Date().toLocaleTimeString()}</h2>
    		</div>
    		);
    		
    		const root = ReactDOM.createRoot(document.getElementById('root'));
    		root.render(element);
    		}
    		setInterval(tick, 1000);
    ```
    
    - thick 함수는 현재 시간을 포함하고 있는 엘리먼트를 생성하여 root div에 렌더링 하는 역할을 한다.
    - 자바스크립트의 setInterval() 함수를 사용해서 tick()함수를 매 초 호출
    - 내부적으론 tick()함수가 호출될 때마다 기존 엘리먼트를 변경하는 것이 아니라 새로운 엘리먼트를 생성해서 바꿔치기한다.
    
    # 예제 -  시계 만들기
    
    ```jsx
    import React from "react";
    
    function Clock(props){
      return(
        <div>
          <h1>안녕, 리액트!</h1>
          <h2>현재 시간 : {new Date().toLocaleTimeString()}</h2>
        </div>
      );
    }
    
    export default Clock;
    ```
    
    - 시간을 출력하는 컴포넌트 , 이  컴포넌트를 실제화면에 렌더링 하기 위해 index.js 파일을 수정해야한다.
    - index.js 파일에 Clock 컴포넌트를 root div에 렌더링 하도록 코드를 작성한다.
    
    ```jsx
    import React from 'react';
    import ReactDOM from 'react-dom/client';
    import './index.css';
    import reportWebVitals from './reportWebVitals';
    import Clock from './ch04/Clock';
    import App1 from './ch05/App1';
    
    const root = ReactDOM.createRoot(document.getElementById('root'));
    setInterval(() =>{
      root.render(
        <React.StrictMode>
          <Clock />
        </React.StrictMode>
      );
    }, 1000);
    
    reportWebVitals();
    
    ```
    
    # 요약
    
- 엘리먼트
    - 리액트 앱의 가장 작은 빌딩 블록들
    - 화면에 나타나는 내용을 기술하는 자바스크립트 객체
    - 리액트 엘리먼트는 DOM 엘리먼트의 가상 표현
    - 엘리먼트는 자바스크립트 객체 형태로 존재
    - 컴포넌트 유형과 속성 및 내부의 모든 자식에 대한 정보를 포함하고 있는 일반적인 자바스크립트 객체
    - 불변성을 갖고있다
    - 엘리먼트 생성 후에는 자식이나 속성을 바꿀 수 없다.

- 엘리먼트 렌더링하기
    - 렌더링을 위해 ReactDOM의 createRoot() 함수로 만든 root의 render() 함수 사용
        - 리액트 엘리먼트를 HTML 엘리먼트에 렌더링 하는 역할
    - 렌더링 되는 과정은 Virtual DOM 에서 실제 DOM 으로 이동하는 과정
    
- 렌더링된 엘리먼트 업데이트 하기
    - 엘리먼트는 한 번 생성되면 바꿀 수 없기 때문에 엘리먼트를 업데이트 하기 위해서는 다시 생성해야한다.
    - 기존 엘리먼트를 변경하는 것이 아니라 새로운 엘리먼트를 생성해서 바꿔치기 하는 것.